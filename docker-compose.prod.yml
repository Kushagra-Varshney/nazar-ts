services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - file-watcher-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - file-watcher-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI for monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: unless-stopped
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - file-watcher-network

  # Gateway Orchestrator
  gateway-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: gateway-orchestrator
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      GATEWAY_PORT: 3001
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: gateway-orchestrator
    command: ["node", "dist/gateway-orchestrator.js"]
    networks:
      - file-watcher-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Consumer (Analytics API)
  consumer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: consumer
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      gateway-orchestrator:
        condition: service_healthy
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      APP_MODE: consumer
      ENABLE_API: "true"
      PORT: 3000
      GATEWAY_URL: http://gateway-orchestrator:3001
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: consumer
      KAFKA_GROUP_ID: file-events-consumer
    volumes:
      - consumer-db:/app/data
    command: ["node", "dist/producer-consumer.js"]
    networks:
      - file-watcher-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Producer (File Watcher)
  producer:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: producer
    restart: unless-stopped
    depends_on:
      gateway-orchestrator:
        condition: service_healthy
    environment:
      NODE_ENV: production
      APP_MODE: producer
      ENABLE_API: "false"
      GATEWAY_URL: http://gateway-orchestrator:3001
      KAFKA_BROKERS: kafka:29092
      KAFKA_CLIENT_ID: producer
    volumes:
      # Mount directories to watch
      - ./watched-files:/app/watched-files
      - /tmp/file-watcher-test:/app/test-folder
      # You can add more volumes to watch other directories:
      # - /path/to/your/directory:/app/watched-directory
    command: ["node", "dist/producer-consumer.js"]
    networks:
      - file-watcher-network
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep 'node dist/producer-consumer.js' | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    depends_on:
      - gateway-orchestrator
      - consumer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      # For SSL certificates (uncomment if needed):
      # - ./ssl:/etc/nginx/ssl:ro
    networks:
      - file-watcher-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  consumer-db:
    driver: local

networks:
  file-watcher-network:
    driver: bridge